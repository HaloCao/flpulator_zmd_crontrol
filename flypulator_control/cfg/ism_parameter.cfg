#!/usr/bin/env python
PACKAGE = "flypulator_control"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# gen.add("int_param",    int_t,    0, "An Integer parameter", 50,  0, 100)
# gen.add("double_param", double_t, 0, "A double parameter",    .5, 0,   1)
# gen.add("str_param",    str_t,    0, "A string parameter",  "Hello World")
# gen.add("bool_param",   bool_t,   0, "A Boolean parameter",  True)

# size_enum = gen.enum([ gen.const("Small",      int_t, 0, "A small constant"),
#                        gen.const("Medium",     int_t, 1, "A medium constant"),
#                        gen.const("Large",      int_t, 2, "A large constant"),
#                        gen.const("ExtraLarge", int_t, 3, "An extra large constant")],
#                      "An enum to set size")

# gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)
gen.add("control_enable",     bool_t, 0, "enable controller ", False) 
gen.add("w_deadband",     double_t, 0, "Positive RPM reserve",  0.0, 0.0,  100.0) # Used to
# compensate small negative spinrates.
gen.add("ism_lambda_T",     double_t, 0, "ISM: translational lambda",               6, 0,  20) #0.8
gen.add("ism_k_T",          double_t, 0, "ISM: translational k for K_T matrix",     4,  0,  20) #1
gen.add("ism_k_T_I",        double_t, 0, "ISM: translational k_I for K_T_I matrix", 6, 0,  20) #1
gen.add("ism_I_max_T",      double_t, 0, "ISM: translational anti-windup threshold for s*", 5, 0,20)
gen.add("ism_lambda_R",     double_t, 0, "ISM: rotational lambda",                  18, 0,  20) #1
gen.add("ism_k_R",          double_t, 0, "ISM: rotational k for K_R matrix",        2,  0,  20) #1
gen.add("ism_k_R_I",        double_t, 0, "ISM: rotationl k_I for K_R_I matrix",     6, 0,  20) #1
gen.add("ism_I_max_R",      double_t, 0, "ISM: rotational anti-windup threshold for s*", 5, 0,20)


exit(gen.generate(PACKAGE, "flypulator_control", "ism_parameter"))
