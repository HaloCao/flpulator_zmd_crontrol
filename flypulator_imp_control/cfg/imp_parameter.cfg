#!/usr/bin/env python
PACKAGE = "flypulator_imp_control"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# gen.add("int_param",    int_t,    0, "An Integer parameter", 50,  0, 100)
# gen.add("double_param", double_t, 0, "A double parameter",    .5, 0,   1)
# gen.add("str_param",    str_t,    0, "A string parameter",  "Hello World")
# gen.add("bool_param",   bool_t,   0, "A Boolean parameter",  True)

# size_enum = gen.enum([ gen.const("Small",      int_t, 0, "A small constant"),
#                        gen.const("Medium",     int_t, 1, "A medium constant"),
#                        gen.const("Large",      int_t, 2, "A large constant"),
#                        gen.const("ExtraLarge", int_t, 3, "An extra large constant")],
#                      "An enum to set size")

# gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)

gen.add("imp_lambda_R",     double_t, 0, "IMP: rotational lambda",                  3, 0,  20) # 10
gen.add("imp_k_R",          double_t, 0, "IMP: rotational k for K_R matrix",        2,  0,  20) #5 
gen.add("imp_k_R_I",        double_t, 0, "IMP: rotationl k_I for K_R_I matrix",     0.5, 0,  20) #10

gen.add("imp_Kp",           double_t, 0, "Imp: translational k_p for k_i matrix",     50, 0,  100) #10
gen.add("imp_Kd",           double_t, 0, "Imp: translational k_d for k_d matrix",     4,  0,  20) #6
gen.add("imp_F_ext",        double_t, 0, "Imp: F_ext",     0,  -100,  100)


exit(gen.generate(PACKAGE, "flypulator_imp_control", "imp_parameter"))