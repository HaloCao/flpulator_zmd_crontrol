#!/usr/bin/env python
PACKAGE = "flypulator_zmd_control"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# gen.add("int_param",    int_t,    0, "An Integer parameter", 50,  0, 100)
# gen.add("double_param", double_t, 0, "A double parameter",    .5, 0,   1)
# gen.add("str_param",    str_t,    0, "A string parameter",  "Hello World")
# gen.add("bool_param",   bool_t,   0, "A Boolean parameter",  True)

# size_enum = gen.enum([ gen.const("Small",      int_t, 0, "A small constant"),
#                        gen.const("Medium",     int_t, 1, "A medium constant"),
#                        gen.const("Large",      int_t, 2, "A large constant"),
#                        gen.const("ExtraLarge", int_t, 3, "An extra large constant")],
#                      "An enum to set size")

# gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)

#gen.add("w_deadband",     double_t, 0, "Positive RPM reserve",  0.0, 0.0,  100.0) # Used to
# compensate small negative spinrates.
gen.add("zmd_K_pp",     double_t, 0, "ZMD: translational P regler",               15, 0,  50) #0.8
gen.add("zmd_K_pi",     double_t, 0, "ZMD: translational I regler",              1, 0,  20) #0.8
gen.add("zmd_K_pd",          double_t, 0, "ZMD: translational D Regler",     5,  0,  20) #1
gen.add("zmd_K_del",        double_t, 0, "ZMD: regler for w_d and f_dot", 1, 0,  20) #1
gen.add("zmd_K_q",      double_t, 0, "ZMD: regler for Rotation, from q_r to q_d", 4, 0,20)
gen.add("zmd_K_ap",     double_t, 0, "ZMD: rotation P regler, for tau_r",                  7, 0,  50) #1
gen.add("zmd_K_ai",     double_t, 0, "ZMD: rotation I regler, for tau_r",                  1, 0,  30) #1
gen.add("zmd_K_ad",          double_t, 0, "ZMD: rotation D regler, for tau_r",        1,  0,  20) #1


exit(gen.generate(PACKAGE, "flypulator_zmd_control", "zmd_parameter"))
